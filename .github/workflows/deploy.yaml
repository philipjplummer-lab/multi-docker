name: Deploy MultiDocker

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Resolve Docker Hub variables and validate
      - name: Resolve Docker Hub vars
        id: dh
        shell: bash
        run: |
          ns="${{ secrets.DOCKERHUB_NAMESPACE }}"
          login="${{ secrets.DOCKERHUB_LOGIN }}"
          user="${{ secrets.DOCKERHUB_USERNAME }}"
          token="${{ secrets.DOCKERHUB_TOKEN }}"
          pass="${{ secrets.DOCKERHUB_PASSWORD }}"

          # Prefer explicit login; else fall back to username
          if [ -z "$login" ]; then login="$user"; fi
          # Prefer token; else fall back to password (not recommended, but supported)
          if [ -z "$token" ]; then token="$pass"; fi
          # Namespace defaults to the login if not provided
          if [ -z "$ns" ]; then ns="$login"; fi

          # Basic validation
          if [ -z "$login" ] || [ -z "$token" ] || [ -z "$ns" ]; then
            echo "❌ Missing Docker Hub secrets." >&2
            echo "   Set one of the following combos in repo Settings → Secrets and variables → Actions:" >&2
            echo "   - DOCKERHUB_LOGIN + DOCKERHUB_TOKEN (+ optional DOCKERHUB_NAMESPACE)" >&2
            echo "   - OR DOCKERHUB_USERNAME + DOCKERHUB_TOKEN (or DOCKERHUB_PASSWORD)" >&2
            exit 1
          fi

          # Enforce lowercase repo namespace (Docker Hub requires lowercase)
          ns="$(echo "$ns" | tr '[:upper:]' '[:lower:]')"

          echo "REGISTRY_LOGIN=$login" >> "$GITHUB_ENV"
          echo "REGISTRY_TOKEN=$token" >> "$GITHUB_ENV"
          echo "REGISTRY_NAMESPACE=$ns" >> "$GITHUB_ENV"

          echo "namespace=$ns" >> "$GITHUB_OUTPUT"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_LOGIN }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Client tests (local tag; no push/auth needed) ---
      - name: Build client test image
        run: docker build -t react-test:ci -f ./client/Dockerfile.dev ./client

      - name: Run client tests
        run: docker run --rm -e CI=true react-test:ci npm test

      # --- Build & push images ---
      - name: Build & push client
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: ${{ env.REGISTRY_NAMESPACE }}/multi-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push nginx
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: ${{ env.REGISTRY_NAMESPACE }}/multi-nginx:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push api
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: true
          tags: ${{ env.REGISTRY_NAMESPACE }}/multi-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push worker
        uses: docker/build-push-action@v6
        with:
          context: ./worker
          push: true
          tags: ${{ env.REGISTRY_NAMESPACE }}/multi-worker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional: debug the final namespace used (no secrets printed)
      - name: Show image tags (debug)
        run: |
          echo "Will push:"
          echo "  docker.io/${{ env.REGISTRY_NAMESPACE }}/multi-client:latest"
          echo "  docker.io/${{ env.REGISTRY_NAMESPACE }}/multi-nginx:latest"
          echo "  docker.io/${{ env.REGISTRY_NAMESPACE }}/multi-server:latest"
          echo "  docker.io/${{ env.REGISTRY_NAMESPACE }}/multi-worker:latest"
